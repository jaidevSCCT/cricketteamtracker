openapi: 3.0.3
info:
  title: My Cricket App API
  version: 1.1.0
  description: |
    API for tournaments, matches, and players. - **POST /matches** accepts player **names**; the server upserts players, resolves IDs,
      computes totals, and returns the created Match with `participants[].playerId`.
servers:
  - url: http://localhost:9090
  - url: http://192.168.68.100:9090
tags:
  - name: Tournaments
  - name: Matches
  - name: Players
  - name: Finance
  - name: Owner Ledger

paths:
  /owner-ledger:
    get:
      tags: [ Owner Ledger ]
      summary: List owner ledger entries
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/OwnerLedgerEntry' }

    post:
      tags: [ Owner Ledger ]
      summary: Create an owner ledger entry
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/OwnerLedgerEntryCreate' }
            examples:
              example:
                value:
                  date: "2025-08-12"
                  paidAmount: 1500
                  teamName: "Corporate Titans"
                  ground: "Cricket Socials"
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/OwnerLedgerEntry' }
  /owner-ledger/total:
      get:
        tags: [ Owner Ledger ]
        summary: Total amount owner has given across all teams
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    totalOwnerGiven:
                      type: integer
                      minimum: 0
                examples:
                  example:
                    value: { totalOwnerGiven: 4500 }
  /owner-ledger/total-by-team:
      get:
        tags: [ Owner Ledger ]
        summary: Total amount owner has given for a specific team
        parameters:
          - in: query
            name: teamName
            required: true
            schema: { type: string }
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    teamName: { type: string }
                    totalOwnerGiven: { type: integer, minimum: 0 }
                examples:
                  example:
                    value: { teamName: "Corporate Titans", totalOwnerGiven: 1500 }
          '400':
            $ref: '#/components/responses/BadRequest'
  /owner-ledger/by-team:
      get:
        tags: [ Owner Ledger ]
        summary: Per-team rollup of ownerâ€™s given amounts
        responses:
          '200':
            description: OK
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: object
                    properties:
                      teamName: { type: string }
                      totalOwnerGiven: { type: integer, minimum: 0 }
                examples:
                  example:
                    value:
                      - { teamName: "Corporate Titans", totalOwnerGiven: 1500 }
                      - { teamName: "Weekend Warriors", totalOwnerGiven: 3000 }
  /tournaments:
    get:
      tags:
        - Tournaments
      summary: List tournaments
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tournament'
      operationId: listTournaments
    post:
      tags:
        - Tournaments
      summary: Create a tournament
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TournamentCreateRequest'
            examples:
              createTournament:
                value:
                  name: ARX Premier League 2025
                  matchCount: 0
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tournament'
      operationId: createTournament
  /tournaments/{id}:
    get:
      tags:
        - Tournaments
      summary: Get a tournament by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tournament'
        '404':
          $ref: '#/components/responses/NotFound'
      operationId: getTournamentById
  /matches:
    get:
      tags:
        - Matches
      summary: List matches (optionally by tournament)
      parameters:
        - in: query
          name: tournamentId
          schema:
            type: string
            format: uuid
          description: Filter matches for a given tournament.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Match'
      operationId: listMatches
    post:
      tags:
        - Matches
      summary: Create a match (participants by name; server resolves player IDs)
      description: |
        Send player **names** and amounts. The server upserts players, computes totals, and returns the saved Match with `participants[].playerId` populated.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MatchCreateRequest'
            examples:
              createMatch:
                summary: Example create request
                value:
                  tournamentId: uuid-tournament-1
                  date: '2025-08-03'
                  overs: 30
                  venue: Cricket Socials
                  teamA: ALLROUNDERS XI
                  teamB: Challengers
                  ballType: Leather
                  feePerPlayer: 200
                  participants:
                    - name: jaidev
                      tag: OWNER
                      paidByPlayer: 200
                      coveredByOwner: 0
                    - name: prakash
                      tag: PLAYER
                      paidByPlayer: 0
                      coveredByOwner: 200
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Match'
              examples:
                createdMatch:
                  summary: Created match (IDs resolved, totals computed)
                  value:
                    id: uuid-match-1
                    tournamentId: uuid-tournament-1
                    date: '2025-08-03'
                    overs: 30
                    venue: Cricket Socials
                    teamA: ALLROUNDERS XI
                    teamB: Challengers
                    ballType: Leather
                    feePerPlayer: 200
                    ownerMatchFee: 200
                    totalMatchFee: 400
                    participants:
                      - playerId: uuid-1
                        name: jaidev
                        tag: OWNER
                        paidByPlayer: 200
                        coveredByOwner: 0
                      - playerId: uuid-2
                        name: prakash
                        tag: PLAYER
                        paidByPlayer: 0
                        coveredByOwner: 200
                    createdAt: '2025-08-03T14:01:00Z'
                    updatedAt: '2025-08-03T14:01:00Z'
        '400':
          $ref: '#/components/responses/BadRequest'
      operationId: createMatch
  /matches/{id}:
    get:
      tags:
        - Matches
      summary: Get a match by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Match'
        '404':
          $ref: '#/components/responses/NotFound'
      operationId: getMatchById
  /players:
    get:
      tags:
        - Players
      summary: List players
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Player'
      operationId: listPlayers
    post:
      tags:
        - Players
      summary: Create a player (direct)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerCreateRequest'
            examples:
              createPlayer:
                value:
                  name: Jaidev
                  tag: OWNER
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
      operationId: createPlayer
  /players/{id}:
    get:
      tags:
        - Players
      summary: Get a player by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        '404':
          $ref: '#/components/responses/NotFound'
      operationId: getPlayerById
  /finance/total-loss:
    get:
      tags:
        - Finance
      summary: Get total owner loss across all matches
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinanceTotal'
              examples:
                example:
                  value:
                    totalOwnerLoss: 4200
      operationId: getTotalOwnerLoss
  /finance/owner-total:
    get:
      tags: [ Finance ]
      summary: Grand total owner outflow (match losses + owner ledger totals)
      description: >
        Returns the owner's combined outflow:
        - matchOwnerLoss: sum of participants.coveredByOwner across all matches
        - ownerLedgerTotal: sum of paidAmount across owner-ledger entries
        - grandTotalOutflow = matchOwnerLoss + ownerLedgerTotal
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required: [ matchOwnerLoss, ownerLedgerTotal, grandTotalOutflow ]
                properties:
                  matchOwnerLoss:
                    type: integer
                    minimum: 0
                  ownerLedgerTotal:
                    type: integer
                    minimum: 0
                  grandTotalOutflow:
                    type: integer
                    minimum: 0
              examples:
                example:
                  value:
                    matchOwnerLoss: 2200
                    ownerLedgerTotal: 4500
                    grandTotalOutflow: 6700
  /finance/by-match:
    get:
      tags:
        - Finance
      summary: Get owner loss per match
      description: Returns an array with owner loss for each match.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FinanceByMatchItem'
              examples:
                example:
                  value:
                    - matchId: uuid-match-1
                      date: '2025-08-03'
                      tournamentId: uuid-tournament-1
                      ownerLoss: 200
                    - matchId: uuid-match-2
                      date: '2025-08-07'
                      tournamentId: uuid-tournament-1
                      ownerLoss: 0
      operationId: getOwnerLossByMatch
  /finance/by-tournament/{tournamentId}:
    get:
      tags:
        - Finance
      summary: Get total owner loss for a tournament
      parameters:
        - in: path
          name: tournamentId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FinanceTournamentTotal'
              examples:
                example:
                  value:
                    tournamentId: uuid-tournament-1
                    totalOwnerLoss: 400
        '400':
          description: Missing or invalid tournamentId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          $ref: '#/components/responses/NotFound'
      operationId: getTotalOwnerLossByTournament
components:
  responses:
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            notFound:
              value:
                message: Not found
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            bad:
              value:
                message: Validation failed
  schemas:
    Tournament:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        matchCount:
          type: integer
          minimum: 0
          default: 0
      example:
        id: uuid-tournament-1
        name: ARX Premier League 2025
        matchCount: 3
    TournamentCreateRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        matchCount:
          type: integer
          minimum: 0
          default: 0
    Match:
      type: object
      required:
        - id
        - tournamentId
        - date
        - venue
        - participants
      properties:
        id:
          type: string
          format: uuid
        tournamentId:
          type: string
          format: uuid
        date:
          type: string
          description: Date string (e.g., ISO-8601 "2025-08-03" or your chosen format)
          example: '2025-08-03'
        overs:
          type: integer
          default: 20
        venue:
          type: string
        teamA:
          type: string
          default: ARX11
        teamB:
          type: string
          default: ARX12
        ballType:
          type: string
          example: Leather
        feePerPlayer:
          type: integer
          minimum: 0
          default: 0
        ownerMatchFee:
          type: integer
          minimum: 0
          default: 0
        totalMatchFee:
          type: integer
          minimum: 0
          default: 0
        participants:
          type: array
          items:
            $ref: '#/components/schemas/Participant'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    MatchCreateRequest:
      type: object
      required:
        - tournamentId
        - date
        - venue
        - participants
      properties:
        tournamentId:
          type: string
          format: uuid
        date:
          type: string
          description: Date string (e.g., ISO-8601)
          example: '2025-08-03'
        overs:
          type: integer
          default: 20
        venue:
          type: string
        teamA:
          type: string
          default: ARX11
        teamB:
          type: string
          default: ARX12
        ballType:
          type: string
          example: Leather
        feePerPlayer:
          type: integer
          minimum: 0
          default: 0
        participants:
          type: array
          description: Participants by name; server resolves playerId and updates
            player totals.
          items:
            $ref: '#/components/schemas/ParticipantInput'
    Participant:
      type: object
      required:
        - playerId
        - name
      properties:
        playerId:
          type: string
          format: uuid
        name:
          type: string
        tag:
          $ref: '#/components/schemas/PlayerTag'
        paidByPlayer:
          type: integer
          minimum: 0
          default: 0
        coveredByOwner:
          type: integer
          minimum: 0
          default: 0
    ParticipantInput:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Player name; server does case-insensitive lookup/upsert.
          example: jaidev
        tag:
          $ref: '#/components/schemas/PlayerTag'
        paidByPlayer:
          type: integer
          minimum: 0
          default: 0
        coveredByOwner:
          type: integer
          minimum: 0
          default: 0
    OwnerLedgerEntry:
      type: object
      required:
        - id
        - date
        - paidAmount
        - teamName
        - ground
      properties:
        id:
          type: string
          format: uuid
        date:
          type: string
          example:  "2025-08-12"
        paidAmount:
          type: integer
          minimum: 0
          example: 1000
        teamName:
          type: string
          example: ARX11
        ground:
          type: string
          example: "ARX Stadium"
    OwnerLedgerEntryCreate:
      type: object
      required:
        - date
        - paidAmount
        - teamName
        - ground
      properties:
        date:
          type: string
          example:  "2025-08-12"
        paidAmount:
          type: integer
          minimum: 0
          example: 1000
        teamName:
          type: string
          example: ARX11
        ground:
          type: string
          example: "ARX Stadium"
    Player:
      type: object
      required:
        - id
        - name
        - normalizedName
        - totals
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        normalizedName:
          type: string
          description: Lowercased/trimmed name used for unique lookups.
          example: jaidev
        tag:
          $ref: '#/components/schemas/PlayerTag'
        totals:
          $ref: '#/components/schemas/PlayerTotals'
        updatedAt:
          type: string
          format: date-time
      example:
        id: uuid-1
        name: Jaidev
        normalizedName: jaidev
        tag: OWNER
        totals:
          matchAmount: 6000
          ownerCovered: 2000
          matches: 12
        updatedAt: '2025-08-03T14:01:00Z'
    PlayerCreateRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        tag:
          $ref: '#/components/schemas/PlayerTag'
    PlayerTotals:
      type: object
      required:
        - matchAmount
        - ownerCovered
        - matches
      properties:
        matchAmount:
          type: integer
          minimum: 0
          description: Sum of per-player match fees across all matches this player
            played.
          default: 0
        ownerCovered:
          type: integer
          minimum: 0
          description: Sum covered by owner on behalf of this player across matches.
          default: 0
        matches:
          type: integer
          minimum: 0
          description: Number of matches this player participated in.
          default: 0
    PlayerTag:
      type: string
      enum:
        - OWNER
        - PLAYER
      default: PLAYER
    Error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    FinanceTotal:
      type: object
      required:
        - totalOwnerLoss
      properties:
        totalOwnerLoss:
          type: number
          format: double
          description: Total owner loss across all matches.
    FinanceByMatchItem:
      type: object
      required:
        - matchId
        - date
        - tournamentId
        - ownerLoss
      properties:
        matchId:
          type: string
          format: uuid
        date:
          type: string
          format: date
          description: Match date (YYYY-MM-DD).
        tournamentId:
          type: string
          format: uuid
        ownerLoss:
          type: number
          format: double
          description: Owner loss for this match.
    FinanceTournamentTotal:
      type: object
      required:
        - tournamentId
        - totalOwnerLoss
      properties:
        tournamentId:
          type: string
          format: uuid
        totalOwnerLoss:
          type: number
          format: double
          description: Total owner loss for the specified tournament.
